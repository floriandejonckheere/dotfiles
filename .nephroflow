export NF_SERVER=http://localhost:3000

##
# Configuration functions
#

# Set default API server (default: http://localhost:3000)
function nf_server() {
  SERVER=${1:-http://localhost:3000}

  export NF_SERVER=${SERVER}

  echo "API server set to ${SERVER}"
}

##
# Authentication functions
#
# Sign in as a user and set token environment variables (default username: henry.davidson)
function nf_signin() {
  USER=${1:-henry.davidson}
  PASSWORD=${2:-password}

  BODY=$(curl --silent -X POST \
    -d "{\"username\": \"${USER}\", \"password\": \"${PASSWORD}\"}" \
    -H 'Content-Type: application/json' \
    ${NF_SERVER}/api/auth)

  if [[ $(echo "${BODY}" | jq '.errors') != "null" ]]; then
    echo "Error signing in: $(echo "${BODY}" | jq -r '.errors[0].title')"

    return
  fi

  export REFRESH_TOKEN=$(echo "${BODY}" | jq -r '.refresh')
  export ACCESS_TOKEN=$(echo "${BODY}" | jq -r '.access')

  echo "Signed in as ${USER} (valid until $(echo "${BODY}" | jq -r '.refresh_expires_at'))"
}

# Sign out and clear token environment variables
function nf_signout() {
    if [[ ! ${REFRESH_TOKEN} ]]; then
      echo "Error: REFRESH_TOKEN not set"

      return
    fi

  BODY=$(curl --silent --fail -X DELETE \
    -H 'Content-Type: application/json' \
    -H "X-Refresh-Token: ${REFRESH_TOKEN}" \
    ${NF_SERVER}/api/auth)

  if [[ $? -eq 22 ]]; then
    echo "Error signing out"

    return
  fi

  unset ACCESS_TOKEN
  unset REFRESH_TOKEN

  echo "Signed out"
}

# Refresh the access token using the refresh token
function nf_refresh() {
  if [[ ! ${REFRESH_TOKEN} ]]; then
    echo "Error: REFRESH_TOKEN not set"

    return
  fi

  BODY=$(curl --silent -X POST \
    -H 'Content-Type: application/json' \
    -H "X-Refresh-Token: ${REFRESH_TOKEN}" \
    ${NF_SERVER}/api/auth/refresh)

  if [[ $(echo "${BODY}" | jq '.errors') != "null" ]]; then
    echo "Error refreshing token"

    return
  fi

  export ACCESS_TOKEN=$(echo "${BODY}" | jq -r '.access')

  echo "Refreshed access token (valid until $(echo "${BODY}" | jq -r '.access_expires_at'))"
}

# Find or create an integration token and set token environment variables (default scope: link)
function nf_token() {
  SCOPE=${1:-"link"}
  NAME="${SCOPE}-${RANDOM}"

  # Sign in as administrator
  nf_signin nephroflow admin

  # Find or create integration token
  TOKEN=$(curl --silent -X POST \
    -H "Authorization: Bearer ${ACCESS_TOKEN}" \
    -H 'Content-Type: application/json' \
    -d "{\"name\":\"${NAME}\",\"scope\":\"${SCOPE}\",\"expiration_period\":\"1_month\"}" \
    ${NF_SERVER}/api/users/integration_tokens | jq -r '.token')

  EXPIRATION=$(curl --silent -X GET \
    -H "Authorization: Bearer ${ACCESS_TOKEN}" \
    ${NF_SERVER}/api/users/integration_tokens | jq -r ".integration_tokens[] | select(.name == \"${NAME}\") | .expiration_at")

  export ACCESS_TOKEN=${TOKEN}

  echo "Created integration token with scope ${SCOPE} (valid until ${EXPIRATION})"
}

##
# HTTP functions
#

# GET a resource
function nf_get() {
  URL_PATH=${1}
  OPTIONS=${2}

  if [[ ! ${URL_PATH} ]]; then
    echo "Usage: ${0} URL_PATH [OPTIONS...]"

    return 1
  fi

  curl ${OPTIONS} --silent -X GET \
    -H "Authorization: Bearer ${ACCESS_TOKEN}" \
    ${NF_SERVER}/api/${URL_PATH} | jq
}

# POST a resource
function nf_post() {
  URL_PATH=${1}
  BODY=${2}
  OPTIONS=${2}

  if [[ ! ${BODY} ]]; then
    echo "Usage: ${0} URL_PATH JSON_BODY [OPTIONS...]"

    return 1
  fi

  curl ${OPTIONS} --silent -X POST \
    -H "Authorization: Bearer ${ACCESS_TOKEN}" \
    -H 'Content-Type: application/json' \
    -d "${BODY}" \
    ${NF_SERVER}/api/${URL_PATH} | jq
}

# PATCH a resource
function nf_patch() {
  URL_PATH=${1}
  BODY=${2}
  OPTIONS=${2}

  if [[ ! ${BODY} ]]; then
    echo "Usage: ${0} URL_PATH JSON_BODY [OPTIONS...]"

    return 1
  fi

  curl ${OPTIONS} --silent -X PATCH \
    -H "Authorization: Bearer ${ACCESS_TOKEN}" \
    -H 'Content-Type: application/json' \
    -d "${BODY}" \
    ${NF_SERVER}/api/${URL_PATH} | jq
}

function nf_delete() {
  URL_PATH=${1}
  OPTIONS=${2}

  if [[ ! ${URL_PATH} ]]; then
    echo "Usage: ${0} URL_PATH [OPTIONS...]"

    return 1
  fi

  curl ${OPTIONS} --silent -X DELETE \
    -H "Authorization: Bearer ${ACCESS_TOKEN}" \
    ${NF_SERVER}/api/${URL_PATH} | jq
}
