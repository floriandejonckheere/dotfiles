export NF_SERVER=http://localhost:3000
export NF_DB_PREFIX=nephroflow_

##
# Helper functions
#

# Compose wrapper
function nf_compose() {
  COMPOSE_FILE=~/Code/nephroflow-api/compose.yaml

  if [[ ! -f ${COMPOSE_FILE} ]]; then
    COMPOSE_FILE=~/Code/nephroflow-api/docker-compose.yml
  fi

  if [[ ! -f ${COMPOSE_FILE} ]]; then
    echo "Error: ${COMPOSE_FILE} not found"

    return
  fi

  docker compose -f "${COMPOSE_FILE}" "${@}"
}

##
# Configuration functions
#

# Set default API server (default: http://localhost:3000)
function nf_server() {
  SERVER=${1:-http://localhost:3000}

  export NF_SERVER=${SERVER}

  echo "API server set to ${SERVER}"
}

# Set default database prefix (default: nephroflow_)
function nf_db_prefix() {
  PREFIX=${1:-nephroflow_}

  export NF_DB_PREFIX=${PREFIX}

  echo "Database prefix set to ${PREFIX}"
}

##
# Authentication functions
#

# Sign in as a user and set token environment variables (default username: henry.davidson)
function nf_signin() {
  USER=${1:-henry.davidson}
  PASSWORD=${2:-password}

  BODY=$(curl --silent -X POST \
    -d "{\"username\": \"${USER}\", \"password\": \"${PASSWORD}\"}" \
    -H 'Content-Type: application/json' \
    ${NF_SERVER}/api/auth)

  if [[ $(echo "${BODY}" | jq '.errors') != "null" ]]; then
    echo "Error signing in: $(echo "${BODY}" | jq -r '.errors[0].title')"

    return
  fi

  export REFRESH_TOKEN=$(echo "${BODY}" | jq -r '.refresh')
  export ACCESS_TOKEN=$(echo "${BODY}" | jq -r '.access')

  echo "Signed in as ${USER} (valid until $(echo "${BODY}" | jq -r '.refresh_expires_at'))"
}

# Sign out and clear token environment variables
function nf_signout() {
    if [[ ! ${REFRESH_TOKEN} ]]; then
      echo "Error: REFRESH_TOKEN not set"

      return
    fi

  BODY=$(curl --silent --fail -X DELETE \
    -H 'Content-Type: application/json' \
    -H "X-Refresh-Token: ${REFRESH_TOKEN}" \
    ${NF_SERVER}/api/auth)

  if [[ $? -eq 22 ]]; then
    echo "Error signing out"

    return
  fi

  unset ACCESS_TOKEN
  unset REFRESH_TOKEN

  echo "Signed out"
}

# Refresh the access token using the refresh token
function nf_refresh() {
  if [[ ! ${REFRESH_TOKEN} ]]; then
    echo "Error: REFRESH_TOKEN not set"

    return
  fi

  BODY=$(curl --silent -X POST \
    -H 'Content-Type: application/json' \
    -H "X-Refresh-Token: ${REFRESH_TOKEN}" \
    ${NF_SERVER}/api/auth/refresh)

  if [[ $(echo "${BODY}" | jq '.errors') != "null" ]]; then
    echo "Error refreshing token"

    return
  fi

  export ACCESS_TOKEN=$(echo "${BODY}" | jq -r '.access')

  echo "Refreshed access token (valid until $(echo "${BODY}" | jq -r '.access_expires_at'))"
}

# Find or create an integration token and set token environment variables (default scope: link)
function nf_token() {
  SCOPE=${1:-"link"}
  NAME="${SCOPE}-${RANDOM}"

  # Sign in as administrator
  nf_signin nephroflow admin &>/dev/null

  # Find or create integration token
  TOKEN=$(curl --silent -X POST \
    -H "Authorization: Bearer ${ACCESS_TOKEN}" \
    -H 'Content-Type: application/json' \
    -d "{\"name\":\"${NAME}\",\"scope\":\"${SCOPE}\",\"expiration_period\":\"1_month\"}" \
    ${NF_SERVER}/api/users/integration_tokens | jq -r '.token')

  EXPIRATION=$(curl --silent -X GET \
    -H "Authorization: Bearer ${ACCESS_TOKEN}" \
    ${NF_SERVER}/api/users/integration_tokens | jq -r ".integration_tokens[] | select(.name == \"${NAME}\") | .expiration_at")

  export ACCESS_TOKEN=${TOKEN}

  echo "Created integration token with scope ${SCOPE} (valid until ${EXPIRATION})"
}

##
# HTTP functions
#

# GET a resource
function nf_get() {
  URL_PATH=${1#"${NF_SERVER}/api"}
  OPTIONS=${2}

  if [[ ! ${URL_PATH} ]]; then
    echo "Usage: ${0} URL_PATH [OPTIONS...]"

    return 1
  fi

  curl ${OPTIONS} --silent -X GET \
    -H "Authorization: Bearer ${ACCESS_TOKEN}" \
    ${NF_SERVER}/api/${URL_PATH} | jq
}

# POST a resource
function nf_post() {
  URL_PATH=${1#"${NF_SERVER}/api"}
  BODY=${2}
  OPTIONS=${3}

  if [[ ! ${BODY} ]]; then
    echo "Usage: ${0} URL_PATH JSON_BODY [OPTIONS...]"

    return 1
  fi

  curl ${OPTIONS} --silent -X POST \
    -H "Authorization: Bearer ${ACCESS_TOKEN}" \
    -H 'Content-Type: application/json' \
    -d "${BODY}" \
    ${NF_SERVER}/api/${URL_PATH} | jq
}

# PATCH a resource
function nf_patch() {
  URL_PATH=${1#"${NF_SERVER}/api"}
  BODY=${2}
  OPTIONS=${2}

  if [[ ! ${BODY} ]]; then
    echo "Usage: ${0} URL_PATH JSON_BODY [OPTIONS...]"

    return 1
  fi

  curl ${OPTIONS} --silent -X PATCH \
    -H "Authorization: Bearer ${ACCESS_TOKEN}" \
    -H 'Content-Type: application/json' \
    -d "${BODY}" \
    ${NF_SERVER}/api/${URL_PATH} | jq
}

function nf_delete() {
  URL_PATH=${1#"${NF_SERVER}/api"}
  OPTIONS=${2}

  if [[ ! ${URL_PATH} ]]; then
    echo "Usage: ${0} URL_PATH [OPTIONS...]"

    return 1
  fi

  curl ${OPTIONS} --silent -X DELETE \
    -H "Authorization: Bearer ${ACCESS_TOKEN}" \
    ${NF_SERVER}/api/${URL_PATH} | jq
}

##
# Database functions
#

# Connect to production database
function nf_db_connect_prod() {
  PGPASSWORD=${PG_PASSWORD} psql -h ${PG_HOST} -p ${PG_PORT} -U ${PG_USERNAME} -d ${PG_DATABASE}
}

# Open a database console
function nf_db() {
  nf_compose exec postgres psql -P pager -U postgres "${@}"
}

# List databases
function nf_db_ls() {
  nf_db -c "\l"
}

# Terminate all connections to a database
function nf_db_terminate() {
  NAME=${1:-development}

  # Remove prefix
  NAME=${NAME#${NF_DB_PREFIX}}

  nf_db -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid() AND datname='${NF_DB_PREFIX}${NAME}'"
}

# Create a database
function nf_db_create() {
  if [[ ! ${!} ]]; then
    echo "Usage: ${0} NAME ..."

    return 1
  fi

  for NAME in "${@}"; do
    nf_db -c "CREATE DATABASE ${NF_DB_PREFIX}${NAME}"
  done
}

# Drop a database
function nf_db_drop() {
  if [[ ! ${1} ]]; then
    echo "Usage: ${0} NAME ..."

    return 1
  fi

  for NAME in "${@}"; do
    NAME=${NAME#${NF_DB_PREFIX}}

    nf_db -c "DROP DATABASE ${NF_DB_PREFIX}${NAME}"
  done
}

# Rename a database
function nf_db_rename() {
  OLD_NAME=${1#${NF_DB_PREFIX}}
  NEW_NAME=${2#${NF_DB_PREFIX}}

  if [[ ! ${OLD_NAME} || ! ${NEW_NAME} ]]; then
    echo "Usage: ${0} OLD_NAME NEW_NAME"

    return 1
  fi

  nf_db -c "ALTER DATABASE ${NF_DB_PREFIX}${OLD_NAME} RENAME TO ${NF_DB_PREFIX}${NEW_NAME}"
}

# Copy a database
function nf_db_copy() {
  OLD_NAME=${1#${NF_DB_PREFIX}}
  NEW_NAME=${2#${NF_DB_PREFIX}}

  if [[ ! ${OLD_NAME} || ! ${NEW_NAME} ]]; then
    echo "Usage: ${0} OLD_NAME NEW_NAME [PREFIX]"

    return 1
  fi

  nf_db -c "CREATE DATABASE ${NF_DB_PREFIX}${NEW_NAME} TEMPLATE ${NF_DB_PREFIX}${OLD_NAME}"
}

##
# Docker functions
#

# Start the API server
function nf_api() {
  nf_compose run --rm --service-ports web rails s -b 0.0.0.0
}

# Open a shell
function nf_shell() {
  nf_compose run --rm web bash
}

# Open a Rails console
function nf_console() {
  nf_compose run --rm web rails c
}

# Start the Manager
function nf_manager() {
  (
    cd ~/Code/nephroflow-manager || return
    git checkout main
    git pull
    corepack pnpm install
    corepack pnpm run dev
  )
}

# Run a command until it fails
function until_fail() {
  while "$@"; do :; done
}
