#!/usr/bin/env ruby
#
# Night Mode - toggle light/dark theme
#
# Please make sure to install the following packages:
#  - light
#  - compiz or xfwm4
#  - orchis-theme-git
#  - materia-theme-git

# TODO: set Redshift
# TODO: set Terminator theme
# TODO: set IntelliJ theme (https://plugins.jetbrains.com/plugin/14076-auto-dark-mode)

require "optparse"

# For icon names, see gtk3-icon-browser
CONFIGURATION = {
  day: {
    theme: {
      gtk: "Orchis-Red-Light-Compact",
      wm: "Materia-light",
      icon: "Tela-circle-red",
    },
    keyboard: 0,
    icon: "weather-clear",
  },
  night: {
    theme: {
      gtk: "Orchis-Red-Dark-Compact",
      wm: "Materia-dark",
      icon: "Tela-circle-red-dark",
    },
    keyboard: 100,
    icon: "weather-clear-night",
  },
}

class Application
  attr_reader :options

  def initialize(args = ARGV)
    @options = {
      mode: CONFIGURATION.keys.find { |k| CONFIGURATION[k][:theme][:gtk] == gtk_theme }.to_s,
    }

    parser = OptionParser.new do |o|
      o.on("-t", "--toggle", "Toggle day/night") do
        options[:mode] = (options[:mode] == "day" ? "night" : "day")
      end

      o.on("-m", "--mode=MODE", "Set day or night mode") do |arg|
        options[:mode] = arg
      end
    end

    parser.banner = "#{$PROGRAM_NAME} [options]"
    parser.on_tail "-h", "--help", "Show help" do
      puts parser
      exit 1
    end

    parser.parse!(args, into: @options)
  end

  def start
    return if gtk_theme == mode[:theme][:gtk]

    # Set GTK theme
    self.gtk_theme = mode[:theme][:gtk]

    # Set icon theme
    self.icon_theme = mode[:theme][:icon]

    # Set window manager theme
    self.xfwm_theme = mode[:theme][:gtk]
    self.compiz_theme = mode[:theme][:wm]

    # Set keyboard backlight
    self.keyboard_backlight = mode[:keyboard]
  end

  def to_s
    <<~HERE
      <tool>Click to toggle night mode</tool>
      <icon>#{mode[:icon]}</icon>
      <iconclick>#{$PROGRAM_NAME} --toggle</iconclick>
    HERE
  end

  private

  def mode
    CONFIGURATION.fetch(options[:mode].to_sym)
  end

  def gtk_theme
    `xfconf-query --channel xsettings -p /Net/ThemeName`.strip
  end

  def gtk_theme=(value)
    `xfconf-query --channel xsettings -p /Net/ThemeName -s #{value}`
    `gsettings set org.gnome.desktop.interface gtk-theme #{value}`
  end

  def icon_theme=(value)
    `xfconf-query --channel xsettings -p /Net/IconThemeName -s #{value}`
    `gsettings set org.gnome.desktop.interface icon-theme #{value}`
  end

  def xfwm_theme=(value)
    `xfconf-query --channel xfwm4 -p /general/theme -s #{value}`
  end

  def compiz_theme=(value)
    `gsettings set org.gnome.desktop.wm.preferences theme #{value}`
  end

  def keyboard_backlight=(value)
    `light -s "sysfs/leds/tpacpi::kbd_backlight" -S #{value}`
  end
end

application = Application.new
application.start
puts application
